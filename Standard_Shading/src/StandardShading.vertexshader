#version 330 core

// Construct input layout for the corresponding attributes
// (vertexPosition_modelspace, vertexNormal_modelspace, vertexUV)
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

// Output variables (position_modelspace, normal_modelspace and UV coordinates), 
// that will be interpolated for each fragment
out vec3 vertex_position_cameraspace;
out vec3 vertex_normal_cameraspace;
out vec2 vertex_UV;

// MVP uniforms
uniform mat4 P;
uniform mat4 V;
uniform mat4 M;

void main()
{
    // Output position of the vertex, in clip space
    gl_Position =  P * V * M * vec4(vertexPosition_modelspace, 1);

    // Propagate the position of the vertex to fragment shader
    vertex_position_cameraspace = vec3(V*M*vec4(vertexPosition_modelspace, 1.0));

    // Propagate the normal of the vertex to fragment shader
    vertex_normal_cameraspace = vec3(V*M*vec4(vertexNormal_modelspace, 0.0)); 
    
    // Propagate the UV coordinates
    vertex_UV = vertexUV;
}
